import "./styles.css";
import { useState } from "react";

export default function App() {
  const val = [
    { type: "text", label: "Name", required: true },
    { type: "checkbox", label: "gender", required: true },
    {
      type: "select",
      label: "country",
      required: false,
      default: "India",
      options: ["USA", "India", "China"],
    },
  ];

  const initialFormState = val.reduce((acc, field) => {
    if (field.type === "checkbox") {
      acc[field.label] = false;
    } else {
      acc[field.label] = field.default || "";
    }
    return acc;
  }, {});

  const [formData, setFormData] = useState(initialFormState);

  const handleChange = (label, value) => {
    setFormData({ ...formData, [label]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form Data:", formData);
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-4 p-4 border rounded max-w-md mx-auto"
    >
      {val.map((field, index) => {
        return (
          <div key={index} className="flex flex-col">
            <label className="mb-1 font-semibold">
              {field.label}{" "}
              {field.required && <span className="text-red-500">*</span>}
            </label>

            {field.type === "text" && (
              <input
                type="text"
                required={field.required}
                value={formData[field.label]}
                onChange={(e) => handleChange(field.label, e.target.value)}
                className="border p-2 rounded"
              />
            )}

            {field.type === "checkbox" && (
              <input
                type="checkbox"
                checked={formData[field.label]}
                required={field.required}
                onChange={(e) => handleChange(field.label, e.target.checked)}
                className="w-4 h-4"
              />
            )}

            {field.type === "select" && (
              <select
                value={formData[field.label]}
                required={field.required}
                onChange={(e) => handleChange(field.label, e.target.value)}
                className="border p-2 rounded"
              >
                <option value="">Select...</option>
                {field.options.map((opt, idx) => (
                  <option key={idx} value={opt}>
                    {opt}
                  </option>
                ))}
              </select>
            )}
          </div>
        );
      })}
      <button
        type="submit"
        className="bg-blue-500 text-white px-4 py-2 rounded"
      >
        Submit
      </button>
    </form>
  );
}
